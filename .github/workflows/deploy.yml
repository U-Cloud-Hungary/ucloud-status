# ===========================================
# GitHub Actions CI/CD Pipeline
# ===========================================

name: 🚀 Build, Push & Deploy to Cloudron

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy_to_cloudron:
        description: 'Deploy to Cloudron after build'
        required: false
        default: true
        type: boolean
      version_override:
        description: 'Override version (leave empty for auto)'
        required: false
        default: ''
        type: string

env:
  IMAGE_NAME: turizoltan96/ucaloudstatus
  CLOUDRON_APP_LOCATION: test.ucloud.hu

jobs:
  # ===========================================
  # Job 1: Build and Test
  # ===========================================
  build:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      image_tag: ${{ steps.version.outputs.image_tag }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📋 Generate Version
        id: version
        run: |
          if [[ "${{ github.event.inputs.version_override }}" != "" ]]; then
            VERSION="${{ github.event.inputs.version_override }}"
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="1.0.${GITHUB_RUN_NUMBER}"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "image_tag=${IMAGE_NAME}:${VERSION}" >> $GITHUB_OUTPUT
          echo "🏷️ Version: ${VERSION}"

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: 🔨 Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:v${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Test Docker Image
        run: |
          echo "🧪 Testing built image..."
          docker run --rm --detach --name test-container \
            -p 3000:3000 \
            -e NODE_ENV=production \
            -e DATABASE_URL="mysql://test:test@localhost:3306/test" \
            ${{ steps.version.outputs.image_tag }}
          
          # Wait for container to start
          sleep 10
          
          # Basic health check
          if docker ps | grep test-container; then
            echo "✅ Container is running"
            docker stop test-container
          else
            echo "❌ Container failed to start"
            docker logs test-container
            exit 1
          fi

  # ===========================================
  # Job 2: Deploy to Cloudron
  # ===========================================
  deploy:
    name: 🚀 Deploy to Cloudron
    runs-on: ubuntu-latest
    needs: build
    if: |
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) &&
      (github.event.inputs.deploy_to_cloudron != 'false')
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🛠️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 📦 Install Cloudron CLI
        run: |
          npm install -g cloudron
          cloudron --version

      - name: 🔑 Login to Cloudron
        run: |
          echo "🔐 Logging into Cloudron..."
          cloudron login ${{ secrets.CLOUDRON_SERVER_URL }} \
            --username ${{ secrets.CLOUDRON_USERNAME }} \
            --password ${{ secrets.CLOUDRON_PASSWORD }}

      - name: 🔍 Check if App Exists
        id: check_app
        run: |
          if cloudron list | grep -q "${{ env.CLOUDRON_APP_LOCATION }}"; then
            echo "app_exists=true" >> $GITHUB_OUTPUT
            echo "✅ App already exists, will update"
          else
            echo "app_exists=false" >> $GITHUB_OUTPUT
            echo "🆕 App doesn't exist, will install"
          fi

      - name: 🆕 Install New App (if needed)
        if: steps.check_app.outputs.app_exists == 'false'
        run: |
          echo "🚀 Installing new app..."
          cloudron install --image ${{ needs.build.outputs.image_tag }} \
            --location ${{ env.CLOUDRON_APP_LOCATION }}

      - name: 🔄 Update Existing App
        if: steps.check_app.outputs.app_exists == 'true'
        run: |
          echo "🔄 Updating existing app..."
          cloudron update --app ${{ env.CLOUDRON_APP_LOCATION }} \
            --image ${{ needs.build.outputs.image_tag }}

      - name: ⚙️ Configure Environment Variables
        run: |
          echo "⚙️ Setting up environment variables..."
          cloudron env --app ${{ env.CLOUDRON_APP_LOCATION }} --set NODE_ENV=production
          cloudron env --app ${{ env.CLOUDRON_APP_LOCATION }} --set PORT=3000
          cloudron env --app ${{ env.CLOUDRON_APP_LOCATION }} --set DATABASE_URL="${{ secrets.DATABASE_URL }}"
          cloudron env --app ${{ env.CLOUDRON_APP_LOCATION }} --set LOG_LEVEL=info
          cloudron env --app ${{ env.CLOUDRON_APP_LOCATION }} --set SERVER_OFFLINE_TIMEOUT=2
          cloudron env --app ${{ env.CLOUDRON_APP_LOCATION }} --set HISTORY_RETENTION_DAYS=365

      - name: 🔄 Restart App
        run: |
          echo "🔄 Restarting app..."
          cloudron restart --app ${{ env.CLOUDRON_APP_LOCATION }}

      - name: ⏳ Wait for App to Start
        run: |
          echo "⏳ Waiting for app to start..."
          sleep 30

      - name: 🩺 Health Check
        run: |
          echo "🩺 Performing health check..."
          MAX_RETRIES=10
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -f -s "https://${{ env.CLOUDRON_APP_LOCATION }}/api/health"; then
              echo "✅ App is healthy!"
              break
            else
              echo "⏳ App not ready yet, retrying in 15 seconds..."
              sleep 15
              RETRY_COUNT=$((RETRY_COUNT + 1))
            fi
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "❌ App failed health check"
            cloudron logs --app ${{ env.CLOUDRON_APP_LOCATION }} --lines 50
            exit 1
          fi

  # ===========================================
  # Job 3: Notification
  # ===========================================
  notify:
    name: 📢 Send Notifications
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()
    
    steps:
      - name: 📢 Success Notification
        if: needs.deploy.result == 'success'
        run: |
          echo "🎉 Deployment successful!"
          echo "🚀 Version: ${{ needs.build.outputs.version }}"
          echo "🌐 URL: https://${{ env.CLOUDRON_APP_LOCATION }}"
          echo "🐳 Image: ${{ needs.build.outputs.image_tag }}"

      - name: ❌ Failure Notification
        if: needs.build.result == 'failure' || needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "Please check the logs above for details."
          exit 1

  # ===========================================
  # Job 4: Cleanup Old Images (Optional)
  # ===========================================
  cleanup:
    name: 🧹 Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: needs.deploy.result == 'success' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 🧹 Clean up old Docker images
        run: |
          echo "🧹 Cleaning up old images..."
          # Keep last 5 versions
          # This would require Docker Hub API calls
          echo "Manual cleanup needed for old versions"