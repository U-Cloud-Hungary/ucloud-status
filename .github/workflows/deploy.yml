# ===========================================
# GitHub Actions CI/CD Pipeline
# ===========================================

name: 🚀 Build, Push & Deploy to Cloudron

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy_to_cloudron:
        description: 'Deploy to Cloudron after build'
        required: false
        default: true
        type: boolean
      version_override:
        description: 'Override version (leave empty for auto)'
        required: false
        default: ''
        type: string

env:
  IMAGE_NAME: turizoltan96/ucaloudstatus
  CLOUDRON_APP_LOCATION: test.ucloud.hu

jobs:
  # ===========================================
  # Job 1: Build and Test
  # ===========================================
  build:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      image_tag: ${{ steps.version.outputs.image_tag }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📋 Generate Version
        id: version
        run: |
          if [[ "${{ github.event.inputs.version_override }}" != "" ]]; then
            VERSION="${{ github.event.inputs.version_override }}"
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="1.0.${GITHUB_RUN_NUMBER}"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "image_tag=${IMAGE_NAME}:${VERSION}" >> $GITHUB_OUTPUT
          echo "🏷️ Version: ${VERSION}"

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: 🔨 Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:v${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDPLATFORM=linux/amd64

  # ===========================================
  # Job 2: Deploy to Cloudron (API Token)
  # ===========================================
  deploy:
    name: 🚀 Deploy to Cloudron
    runs-on: ubuntu-latest
    needs: build
    if: |
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) &&
      (github.event.inputs.deploy_to_cloudron != 'false')

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Get App Info
        id: app_info
        run: |
          echo "🔍 Getting app information..."
          
          APP_INFO=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.CLOUDRON_API_TOKEN }}" \
            "https://${{ secrets.CLOUDRON_SERVER_URL }}/api/v1/apps" | \
            jq -r '.apps[] | select(.fqdn == "${{ secrets.CLOUDRON_APP_LOCATION }}") | .id')
          
          if [ -n "$APP_INFO" ] && [ "$APP_INFO" != "null" ]; then
            echo "app_id=$APP_INFO" >> $GITHUB_OUTPUT
            echo "app_exists=true" >> $GITHUB_OUTPUT
            echo "✅ App exists with ID: $APP_INFO"
          else
            echo "app_exists=false" >> $GITHUB_OUTPUT
            echo "🆕 App doesn't exist, will install"
          fi

      - name: 🆕 Install New App (if needed)
        if: steps.app_info.outputs.app_exists == 'false'
        run: |
          echo "🚀 Installing new app via API..."
          
          # Build JSON payload with proper variable substitution
          JSON_PAYLOAD=$(cat <<EOF
          {
            "subdomain": "${{ secrets.CLOUDRON_APP_SUBDOMAIN }}",
            "domain": "${{ secrets.CLOUDRON_APP_DOMAIN }}",
            "accessRestriction": {
              "users": [],
              "groups": []
            },
            "manifest": {
              "version": "1.0.0",
              "dockerImage": "${{ needs.build.outputs.image_tag }}",
              "healthCheckPath": "/api/health",
              "httpPort": 3000,
              "title": "UCloud Status",
              "description": "Status monitoring application",
              "author": "UCloud Team",
              "website": "https://${{ secrets.CLOUDRON_APP_SUBDOMAIN }}.${{ secrets.CLOUDRON_APP_DOMAIN }}",
              "contactEmail": "admin@ucloud.hu",
              "icon": "https://cloudron.io/img/logo.png",
              "tagline": "Monitor your services",
              "tags": ["monitoring", "status"],
              "memoryLimit": 134217728,
              "manifestVersion": 2,
              "minBoxVersion": "4.0.0",
              "addons": {}
            }
          }
          EOF
          )
          
          echo "📋 JSON Payload: $JSON_PAYLOAD"
          
          RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -X POST \
            -H "Authorization: Bearer ${{ secrets.CLOUDRON_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            "https://${{ secrets.CLOUDRON_SERVER_URL }}/api/v1/apps")
          
          HTTP_CODE=$(echo $RESPONSE | tr -d '\n' | sed -E 's/.*HTTPSTATUS:([0-9]{3})$/\1/')
          BODY=$(echo $RESPONSE | sed -E 's/HTTPSTATUS:[0-9]{3}$//')
          
          echo "📊 HTTP Status: $HTTP_CODE"
          echo "📄 Response Body: $BODY"
          
          if [ "$HTTP_CODE" = "201" ] || [ "$HTTP_CODE" = "202" ]; then
            echo "✅ App installation started successfully"
          else
            echo "❌ App installation failed"
            echo "🔍 Full response: $RESPONSE"
            exit 1
          fi

      - name: 🔄 Update Existing App
        if: steps.app_info.outputs.app_exists == 'true'
        run: |
          echo "🔄 Updating existing app via API..."
          
          # Build JSON payload with proper variable substitution
          JSON_PAYLOAD=$(cat <<EOF
          {
            "manifest": {
              "image": "${{ needs.build.outputs.image_tag }}"
            }
          }
          EOF
          )
          
          echo "📋 JSON Payload: $JSON_PAYLOAD"
          
          RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -X POST \
            -H "Authorization: Bearer ${{ secrets.CLOUDRON_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            "https://${{ secrets.CLOUDRON_SERVER_URL }}/api/v1/apps/${{ steps.app_info.outputs.app_id }}/update")
          
          HTTP_CODE=$(echo $RESPONSE | tr -d '\n' | sed -E 's/.*HTTPSTATUS:([0-9]{3})$/\1/')
          BODY=$(echo $RESPONSE | sed -E 's/HTTPSTATUS:[0-9]{3}$//')
          
          echo "📊 HTTP Status: $HTTP_CODE"
          echo "📄 Response Body: $BODY"
          
          if [ "$HTTP_CODE" = "202" ] || [ "$HTTP_CODE" = "200" ]; then
            echo "✅ App update started successfully"
          else
            echo "❌ App update failed"
            echo "🔍 Full response: $RESPONSE"
            exit 1
          fi

      - name: ⚙️ Configure Environment Variables
        if: steps.app_info.outputs.app_exists == 'true'
        run: |
          echo "⚙️ Setting up environment variables via API..."
          
          # Set environment variables
          curl -s \
            -X PUT \
            -H "Authorization: Bearer ${{ secrets.CLOUDRON_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "env": {
                "NODE_ENV": "production",
                "PORT": "3000",
                "DATABASE_URL": "${{ secrets.DATABASE_URL }}",
                "LOG_LEVEL": "info",
                "SERVER_OFFLINE_TIMEOUT": "2",
                "HISTORY_RETENTION_DAYS": "365"
              }
            }' \
            "https://${{ env.CLOUDRON_APP_LOCATION }}/api/v1/apps/${{ steps.app_info.outputs.app_id }}/env"
          
          echo "✅ Environment variables configured"

      - name: 🔄 Restart App
        if: steps.app_info.outputs.app_exists == 'true'
        run: |
          echo "🔄 Restarting app via API..."
          
          RESTART_RESULT=$(curl -s -w "%{http_code}" \
            -X POST \
            -H "Authorization: Bearer ${{ secrets.CLOUDRON_API_TOKEN }}" \
            "https://${{ env.CLOUDRON_APP_LOCATION }}/api/v1/apps/${{ steps.app_info.outputs.app_id }}/restart")
          
          HTTP_CODE="${RESTART_RESULT: -3}"
          if [ "$HTTP_CODE" = "202" ] || [ "$HTTP_CODE" = "200" ]; then
            echo "✅ App restart initiated"
          else
            echo "❌ App restart failed: $RESTART_RESULT"
            exit 1
          fi

      - name: ⏳ Wait for Deployment
        run: |
          echo "⏳ Waiting for deployment to complete..."
          sleep 60  # Give time for update and restart

      - name: 🩺 Health Check
        run: |
          echo "🩺 Performing health check..."
          MAX_RETRIES=10
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "https://${{ env.CLOUDRON_APP_LOCATION }}/api/health" || echo "000")
          
            if [ "$HTTP_CODE" = "200" ]; then
              echo "✅ App is healthy!"
              break
            else
              echo "⏳ App not ready yet (HTTP: $HTTP_CODE), retrying in 15 seconds..."
              sleep 15
              RETRY_COUNT=$((RETRY_COUNT + 1))
            fi
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "❌ App failed health check after $MAX_RETRIES attempts"
            exit 1
          fi

  # ===========================================
  # Job 3: Notification
  # ===========================================
  notify:
    name: 📢 Send Notifications
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()

    steps:
      - name: 📢 Success Notification
        if: needs.deploy.result == 'success'
        run: |
          echo "🎉 Deployment successful!"
          echo "🚀 Version: ${{ needs.build.outputs.version }}"
          echo "🌐 URL: https://${{ env.CLOUDRON_APP_LOCATION }}"
          echo "🐳 Image: ${{ needs.build.outputs.image_tag }}"

      - name: ❌ Failure Notification
        if: needs.build.result == 'failure' || needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "Please check the logs above for details."
          exit 1

  # ===========================================
  # Job 4: Cleanup Old Images (Optional)
  # ===========================================
  cleanup:
    name: 🧹 Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: needs.deploy.result == 'success' && github.ref == 'refs/heads/main'

    steps:
      - name: 🧹 Clean up old Docker images
        run: |
          echo "🧹 Cleaning up old images..."
          # Keep last 5 versions
          # This would require Docker Hub API calls
          echo "Manual cleanup needed for old versions"